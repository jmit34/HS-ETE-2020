### 2.1 estimation de ùúã avec la m√©thode de Monte-Carlo.
######################################################################################################
# ici nous allons utiliser le g√©n√©rateur de nombres al√©tatoires de python, dans la bibliotheque random
# la fonction random() nous donne un nombre compris entre 0 et 1 √† chaque fois qu'on l'appelle.
# pour mesurer le temps d'ex√©cution, nous avons besoin de la bibliot√®que time
import time
from random import random

# on demande √† l'utilisateur d'indiquer le nombre de points √† tirer au sort.
nombre_de_points = int(input("combien de points voulez-vous tirer au sort ?:") )

# on utilise une variable qui va contenir le nombre de points √† l'int√©rieur du quart de cercle
points_dedans = 0

# enregistrons l'instant du d√©but de l'execution
debut = time.time()

# on utilise une boucle "for" pour tirer au sort le nombre de points demand√©s par l'utilisateur
for i in range(nombre_de_points):
    # appelons x et y les coordonn√©es du point que l'on tire au sort
    x = random()
    y = random()
    # si la somme des carr√©s des coordonn√©es du point est inf√©rieure √† 1 alors le point est √† l'int√©rieur
    # du cercle. Bien s√ªr ici nous utilisons la formule du cercle.
    if x**2 + y**2 < 1:
        points_dedans += 1

# enregistrons l'instant de fin de l'ex√©cution, on peut alors calculer la dur√©e:
fin = time.time()
duree = fin - debut

# c'est termin√©, points_dedans contient le nombre de points √† l'int√©rieur du quart de cercle.
# pour un cerlce de rayon 1 la surface du quart de cercle vaut ùúã/4 le carr√© de cot√© 1 a une surface √©gale √† 1
# il suffit de multiplier le rapport des points_dedans par nombre_de_points par 4 pour obtenir une valeur de ùúã :

# enfin, affichons les r√©sultats:
print(f"temps d'√©xecution total : {duree:.1f} secondes")
print(f"estimation de ùúã = {4 * points_dedans / nombre_de_points}")
